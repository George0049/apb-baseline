/*
Copyright 2016 Australian Centre for Robotic Vision

DEPRECATED

This node was created to save separate pcd files for each of the
labels generated by the segmentation_ros node. This functionality has now been
implemented in split_labelled_point_cloud_ros_node as a service call.
*/

#include <apc_3d_vision.hpp>

#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <tf/transform_listener.h>

#include <sensor_msgs/image_encodings.h>
#include <sensor_msgs/Image.h>
#include <sensor_msgs/PointCloud2.h>

#include <cv_bridge/cv_bridge.h>
#include <pcl_ros/point_cloud.h>

#include <vector>
#include <utility>
#include <map>
#include "std_msgs/String.h"
#include "segmentation_ros/EnablePublisher.h"

boost::shared_ptr<pcl::PointCloud<pcl::PointXYZL>> segmented_objects;
std::map<int, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZL>>> object_map_l;
std::map<int, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ>>> object_map;
Apc3dVision apc_vis;

/**
 * This tutorial demonstrates simple receipt of messages over the ROS system.
 */
void chatterCallback(const sensor_msgs::PointCloud2::ConstPtr msg) {
    pcl::fromROSMsg(*msg, *segmented_objects);
    std::cout << "YOOOOO" << std::endl;

    int numberOfObjects = 0;
    int label = 0;

    std::map<int, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZL>>>::iterator
        object_itr;

    pcl::PointCloud<pcl::PointXYZL>::iterator seg_itr =
        (*segmented_objects).begin();

    for (; seg_itr != (*segmented_objects).end(); ++seg_itr) {
        label = seg_itr->label;
        // std::cout << "Label = " << point_itr->label << std::endl;

        object_itr = object_map_l.find(label);
        if (object_itr != object_map_l.end()) {
            // Add more points to the point cloud
            // object_map_l[label]->points.push_back(*seg_itr);
            object_map_l[label]->push_back(*seg_itr);
        } else {
            // Create a new point cloud
            numberOfObjects++;
            object_map_l[label].reset(new pcl::PointCloud<pcl::PointXYZL>);
            // object_map_l[label]->points.push_back(*seg_itr);
            object_map_l[label]->push_back(*seg_itr);
        }
    }

    std::pair<int, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZL>>> o_pair;

    BOOST_FOREACH(o_pair, object_map_l) {
        object_map[o_pair.first].reset(new pcl::PointCloud<pcl::PointXYZ>);
        pcl::copyPointCloud(*o_pair.second, *object_map[o_pair.first]);

        std::stringstream fileName;
        fileName << "/home/baxter/co/apc_ws/temp/" << o_pair.first << ".pcd";
        apc_vis.save_pcd_file(fileName.str(), object_map[o_pair.first]);
    }
}

int main(int argc, char **argv) {
    segmented_objects.reset(new pcl::PointCloud<pcl::PointXYZL>);

    /**
    * The ros::init() function needs to see argc and argv so that it can perform
    * any ROS arguments and name remapping that were provided at the command line.
    * For programmatic remappings you can use a different version of init() which takes
    * remappings directly, but for most command-line programs, passing argc and argv is
    * the easiest way to do it.  The third argument to init() is the name of the node.
    *
    * You must call one of the versions of ros::init() before using any other
    * part of the ROS system.
    */
    ros::init(argc, argv, "listener");

    /**
    * NodeHandle is the main access point to communications with the ROS system.
    * The first NodeHandle constructed will fully initialize this node, and the last
    * NodeHandle destructed will close down the node.
    */
    ros::NodeHandle n;

    /**
    * The subscribe() call is how you tell ROS that you want to receive messages
    * on a given topic.  This invokes a call to the ROS
    * master node, which keeps a registry of who is publishing and who
    * is subscribing.  Messages are passed to a callback function, here
    * called chatterCallback.  subscribe() returns a Subscriber object that you
    * must hold on to until you want to unsubscribe.  When all copies of the Subscriber
    * object go out of scope, this callback will automatically be unsubscribed from
    * this topic.
    *
    * The second parameter to the subscribe() function is the size of the message
    * queue.  If messages are arriving faster than they are being processed, this
    * is the number of messages that will be buffered up before beginning to throw
    * away the oldest ones.
    */

    ros::ServiceClient client =
        n.serviceClient<segmentation_ros::EnablePublisher>("enable_publisher");

    segmentation_ros::EnablePublisher srv;
    srv.request.enable = true;

    if (client.call(srv)) {
        // ROS_INFO(srv.response);
    } else {
        ROS_ERROR("Failed to call service EnablePublisher");
        return 1;
    }

    ros::Subscriber sub = n.subscribe(
        "/segmented_pointcloud", 1000, chatterCallback);

    /**
    * ros::spin() will enter a loop, pumping callbacks.  With this version, all
    * callbacks will be called from within this thread (the main one).  ros::spin()
    * will exit when Ctrl-C is pressed, or the node is shutdown by the master.
    */

    while (ros::ok()) {
        ros::spinOnce();
    }

    return 0;
}
